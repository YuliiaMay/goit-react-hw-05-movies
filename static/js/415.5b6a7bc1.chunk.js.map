{"version":3,"file":"static/js/415.5b6a7bc1.chunk.js","mappings":"kMAEaA,EAAOC,EAAAA,GAAAA,IAAH,qHAOJC,EAAQD,EAAAA,GAAAA,IAAH,0C,mCCalB,EAlBkB,SAAC,GAAwD,IAAD,EAArDE,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,OAC1CC,GADgE,EAAdC,QAC1C,mDAAqCL,UAArC,QAA8C,oBAE5D,OACI,UAACJ,EAAD,YACI,UAAC,KAAD,CAAMU,GAAE,UAAKP,GAAb,WACI,SAACD,EAAD,CAAOE,IAAKI,EAAUG,IAAKN,KAC3B,uBAAIA,KACJ,0BAAOC,KACP,0BAAOC,QAEX,SAAC,EAAAK,SAAD,CAAUC,UAAU,6CAApB,UACI,SAAC,KAAD,QAIf,EClBYC,EAAOb,EAAAA,GAAAA,GAAH,+HC0BjB,EAvBgB,SAAC,GAAgB,IAAdc,EAAa,EAAbA,OAEf,OACI,SAACD,EAAD,UAEQC,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,kBAAmBb,EAA1B,EAA0BA,MAAOc,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,cAAeC,EAA9D,EAA8DA,aAA9D,OACP,SAAC,EAAD,CAEIlB,QAASc,EACTb,IAAKgB,EACLf,MAAOA,EACPC,SAAUY,EACVX,OAAQY,EACRV,QAASY,GANJJ,EAFF,KAgB1B,C,yGCQD,UA3Ba,WACT,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAAyBC,GAAzB,iGAE2BC,EAAAA,EAAAA,MAF3B,cAEcC,EAFd,OAGQJ,EAAUI,EAAKC,SAHvB,kBAKeD,GALf,gCAOQE,QAAQC,IAAI,KAAMC,SAP1B,0DADY,uBAAC,SAAD,2BAYZC,EACH,GAAE,KAGC,6BACI,4CACA,SAAC,IAAD,CAASlB,OAAQQ,MAI5B,C,uKC1BM,SAAeI,IAAtB,4CAAO,OAAP,oBAAO,6GAEwBO,EAAAA,EAAAA,IAAA,sBAFxB,UAGyB,OADlBC,EAFP,QAGcC,OAHd,yCAIYD,EAASP,MAJrB,uDAOCE,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAEwBJ,EAAAA,EAAAA,IAAA,8BAAiCI,IAFzD,UAGyB,OADlBH,EAFP,QAGcC,OAHd,yCAIYD,EAASP,MAJrB,uDAOCE,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAiCtB,GAAjC,gGAEwBiB,EAAAA,EAAAA,IAAA,iBAAoBjB,IAF5C,UAGyB,OADlBkB,EAFP,QAGcC,OAHd,yCAIYD,EAASP,MAJrB,uDAOCE,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA8BvB,GAA9B,gGAEwBiB,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,aAFxB,UAGyB,OADlBkB,EAFP,QAGcC,OAHd,yCAIYD,EAASP,MAJrB,uDAOCE,QAAQC,IAAI,KAAMC,SAPnB,gFApCPE,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEO,QAFV,mC","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/Gallery/Gallery.styled.js","components/Gallery/Gallery.jsx","pages/Home.jsx","services/movies-api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Card = styled.div`\n    width: 325px;\n    height: 300px;\n    border: 1px solid #446381;\n    cursor: pointer;\n`;\n\nexport const Image = styled.img`\n    width: 100%;\n`;","import { Card, Image } from \"./MovieCard.styled\";\nimport { Link, Outlet} from \"react-router-dom\";\nimport { Suspense } from \"react\";\n\nconst MovieCard = ({ movieId, src, title, language, rating, release }) => {\n    const movieImg = `https://image.tmdb.org/t/p/w500${src}` ?? '/src/default.jpg';\n\n    return (\n        <Card>\n            <Link to={`${movieId}`}>\n                <Image src={movieImg} alt={title} />\n                <p>{title}</p>\n                <span>{language}</span>\n                <span>{rating}</span>\n            </Link>\n            <Suspense fallback={<div>Loading page...</div>}>\n                <Outlet />\n            </Suspense>\n        </Card>\n    )\n}\n\nexport default MovieCard;","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 30px;\n    width: calc(100% - ((100% - 30px) / 5);\n`;","import MovieCard from \"components/MovieCard/MovieCard\";\nimport { List } from \"./Gallery.styled\";\n\n\n\nconst Gallery = ({ movies }) => {\n\n    return (\n        <List> \n            {\n                movies.map(({ id, original_language, title, vote_average, backdrop_path, release_date }) => \n                    <MovieCard\n                        key={id}\n                        movieId={id}\n                        src={backdrop_path}\n                        title={title}\n                        language={original_language}\n                        rating={vote_average}\n                        release={release_date}\n                    />\n                    //     <Link />\n                    // </MovieCard>\n                )\n            }\n        </List>\n    )\n};\n\nexport default Gallery;","// import { Link, Outlet } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { fetchTrandingMovies } from \"services/movies-api\";\n// import TrandingGallary from \"components/TrandingGallary/TrandingGallary\";\nimport Gallery from \"components/Gallery/Gallery\";\n\n\nconst Home = () => {\n    const [trends, setTrends] = useState([]);\n\n    useEffect(() => {\n        async function getTrends(page) {\n            try {\n                const data = await fetchTrandingMovies();\n                setTrends(data.results);\n                \n                return data;\n            } catch(error) {\n                console.log(error.message);\n            }\n        }\n\n        getTrends();\n    }, []);\n\n    return (\n        <main>\n            <h1>Tranding today</h1>\n            <Gallery movies={trends} />\n\n        </main>\n    )\n}\n\nexport default Home;","import axios from \"axios\";\n\nconst API_KEY = '0feaca93847c0f717b0c2876a0a51030';\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function fetchTrandingMovies() {\n    try {\n        const response = await axios.get(`trending/movie/day`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMoviesByQuery(query) {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieDetails(id) {\n    try {\n        const response = await axios.get(`/movie/${id}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieCast(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/credits`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieReviews(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}"],"names":["Card","styled","Image","movieId","src","title","language","rating","movieImg","release","to","alt","Suspense","fallback","List","movies","map","id","original_language","vote_average","backdrop_path","release_date","useState","trends","setTrends","useEffect","page","fetchTrandingMovies","data","results","console","log","message","getTrends","axios","response","status","fetchMoviesByQuery","query","fetchMovieDetails","fetchMovieCast","api_key"],"sourceRoot":""}